#!/bin/sh
#
# SPDX-License-Identifier: GPL-2.0-or-later
#
# list-rt-tasks: list the realtime-scheduled tasks on the system.
#
# Copyright (C) 2021 Christophe BLAESS <christophe.blaess@logilin.fr>
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
# more details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc., 51
# Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
#

main()
{
	local pid
	local thread

	cd /proc
	for pid in [0-9]*
	do
		cd /proc/${pid}/task || continue
		for thread in [0-9]*
		do
			handle_thread_scheduling ${pid} ${thread}
		done
	done
}



handle_thread_scheduling()
{
	local pid=$1
	local thread=$2

	local status
	local command
	local scheduling
	local priority
	local policy

	status=$(cat /proc/${thread}/stat 2>/dev/null) || return 1

	# Command names are surrounded by brackets.
	command=${status#*(}
	command=${command%)*}

	# But a command name may also contain a bracket.
	status=${status##*)}

	scheduling=$(echo ${status} | awk '{print $38, $39}')
	priority=${scheduling%% *}
	policy=${scheduling##* }

	# sched(7):
	# Processes scheduled under one of the real-time policies
	# (SCHED_FIFO, SCHED_RR) have a sched_priority value in
	# the range 1 (low) to 99 (high).

	if [ ${priority} -ge 1 ]
	then
		display_thread_scheduling "${pid}" "${thread}" "${command}" "${policy}" "${priority}"
	fi
	return 0
}



display_thread_scheduling()
{
	local pid="$1"
	local thread="$2"
	local command="$3"
	local policy="$4"
	local priority="$5"

	if [ "$policy" = "1" ]
	then
		printf "FIFO/${priority} "
	elif [ "$policy" = "2" ]
	then
		printf "RR/${priority} "
	elif [ "$policy" = "6" ]
	then
		printf "DEADLINE "
	else
		printf "??/${priority} "
	fi

	if [ ${pid} -eq ${thread} ]
	then
		printf "[${thread}] "
	else
		printf "[${thread} in ${pid}] "
	fi
	printf "(${command})\n"

	return 0
}



main
exit $?
